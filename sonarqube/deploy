apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarqube
  namespace: sonar
  labels:
    app: sonarqube
spec:
  selector:
    matchLabels:
      app: sonarqube
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      serviceAccountName: sonarqube
      initContainers:
      - name: fix-permissions
        image: busybox
        command: ["sh", "-c", "chown -R 1000:1000 /opt/sonarqube/data"]
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
      containers:
      - name: sonarqube
        image: sonarqube:latest
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "3Gi"
        livenessProbe:
          httpGet:
            path: /api/system/health
            port: 9000
          initialDelaySeconds: 120
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/system/health
            port: 9000
          initialDelaySeconds: 120
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
          periodSeconds: 10
        env:
        - name: SONAR_JDBC_URL
          valueFrom:
            configMapKeyRef:
              name: sonarqube-config
              key: SONAR_JDBC_URL
        - name: SONAR_JDBC_USERNAME
          valueFrom:
            secretKeyRef:
              name: sonarqube
              key: SONAR_JDBC_USERNAME
        - name: SONAR_JDBC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sonarqube
              key: SONAR_JDBC_PASSWORD
        ports:
        - containerPort: 9000
          name: sonarqube
        volumeMounts:
        - name: sonarqube-data
          mountPath: /opt/sonarqube/data
      volumes:
      - name: sonarqube-data
        persistentVolumeClaim:
          claimName: sonarpvc
# The above volume uses a static PersistentVolumeClaim 'sonarpvc' defined in pvc.yaml
# This PVC binds to a static PersistentVolume with no storageClassName to avoid dynamic provisioning
# Avoid creating dynamic PVCs with storageClass 'standard' in the sonar namespace to prevent duplicates
